/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";
import { MintType, mintTypeBeet } from "../types/MintType";
import { MintPhase, mintPhaseBeet } from "../types/MintPhase";
import { Config, configBeet } from "../types/Config";

/**
 * Arguments used to create {@link MintDataConfig}
 * @category Accounts
 * @category generated
 */
export type MintDataConfigArgs = {
    authority: web3.PublicKey;
    distributor: web3.PublicKey;
    fundsRecipient: web3.PublicKey;
    splTokenName: string;
    mintType: MintType;
    mintPhase: MintPhase;
    bump: number;
    config: Config;
};

export const mintDataConfigDiscriminator = [
    95, 246, 193, 112, 40, 180, 151, 98,
];
/**
 * Holds the data for the {@link MintDataConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class MintDataConfig implements MintDataConfigArgs {
    private constructor(
        readonly authority: web3.PublicKey,
        readonly distributor: web3.PublicKey,
        readonly fundsRecipient: web3.PublicKey,
        readonly splTokenName: string,
        readonly mintType: MintType,
        readonly mintPhase: MintPhase,
        readonly bump: number,
        readonly config: Config,
    ) {}

    /**
     * Creates a {@link MintDataConfig} instance from the provided args.
     */
    static fromArgs(args: MintDataConfigArgs) {
        return new MintDataConfig(
            args.authority,
            args.distributor,
            args.fundsRecipient,
            args.splTokenName,
            args.mintType,
            args.mintPhase,
            args.bump,
            args.config,
        );
    }

    /**
     * Deserializes the {@link MintDataConfig} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(
        accountInfo: web3.AccountInfo<Buffer>,
        offset = 0,
    ): [MintDataConfig, number] {
        return MintDataConfig.deserialize(accountInfo.data, offset);
    }

    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link MintDataConfig} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(
        connection: web3.Connection,
        address: web3.PublicKey,
        commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
    ): Promise<MintDataConfig> {
        const accountInfo = await connection.getAccountInfo(
            address,
            commitmentOrConfig,
        );
        if (accountInfo == null) {
            throw new Error(
                `Unable to find MintDataConfig account at ${address}`,
            );
        }
        return MintDataConfig.fromAccountInfo(accountInfo, 0)[0];
    }

    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(
        programId: web3.PublicKey = new web3.PublicKey(
            "indxL6jiTVfJL48JFdRu7Bz4WKXBQX1otGgvnvpsaPE",
        ),
    ) {
        return beetSolana.GpaBuilder.fromStruct(programId, mintDataConfigBeet);
    }

    /**
     * Deserializes the {@link MintDataConfig} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset = 0): [MintDataConfig, number] {
        return mintDataConfigBeet.deserialize(buf, offset);
    }

    /**
     * Serializes the {@link MintDataConfig} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number] {
        return mintDataConfigBeet.serialize({
            accountDiscriminator: mintDataConfigDiscriminator,
            ...this,
        });
    }

    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link MintDataConfig} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args: MintDataConfigArgs) {
        const instance = MintDataConfig.fromArgs(args);
        return mintDataConfigBeet.toFixedFromValue({
            accountDiscriminator: mintDataConfigDiscriminator,
            ...instance,
        }).byteSize;
    }

    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link MintDataConfig} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(
        args: MintDataConfigArgs,
        connection: web3.Connection,
        commitment?: web3.Commitment,
    ): Promise<number> {
        return connection.getMinimumBalanceForRentExemption(
            MintDataConfig.byteSize(args),
            commitment,
        );
    }

    /**
     * Returns a readable version of {@link MintDataConfig} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            authority: this.authority.toBase58(),
            distributor: this.distributor.toBase58(),
            fundsRecipient: this.fundsRecipient.toBase58(),
            splTokenName: this.splTokenName,
            mintType: "MintType." + MintType[this.mintType],
            mintPhase: "MintPhase." + MintPhase[this.mintPhase],
            bump: this.bump,
            config: this.config,
        };
    }
}

/**
 * @category Accounts
 * @category generated
 */
export const mintDataConfigBeet = new beet.FixableBeetStruct<
    MintDataConfig,
    MintDataConfigArgs & {
        accountDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["authority", beetSolana.publicKey],
        ["distributor", beetSolana.publicKey],
        ["fundsRecipient", beetSolana.publicKey],
        ["splTokenName", beet.utf8String],
        ["mintType", mintTypeBeet],
        ["mintPhase", mintPhaseBeet],
        ["bump", beet.u8],
        ["config", configBeet],
    ],
    MintDataConfig.fromArgs,
    "MintDataConfig",
);
