/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link IndexProtocolState}
 * @category Accounts
 * @category generated
 */
export type IndexProtocolStateArgs = {
    superAuthority: web3.PublicKey;
    isPaused: boolean;
    isOpen: boolean;
    counter: beet.bignum;
    reserved: number[] /* size: 64 */;
};

export const indexProtocolStateDiscriminator = [
    35, 147, 212, 173, 229, 62, 111, 60,
];
/**
 * Holds the data for the {@link IndexProtocolState} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class IndexProtocolState implements IndexProtocolStateArgs {
    private constructor(
        readonly superAuthority: web3.PublicKey,
        readonly isPaused: boolean,
        readonly isOpen: boolean,
        readonly counter: beet.bignum,
        readonly reserved: number[] /* size: 64 */,
    ) {}

    /**
     * Creates a {@link IndexProtocolState} instance from the provided args.
     */
    static fromArgs(args: IndexProtocolStateArgs) {
        return new IndexProtocolState(
            args.superAuthority,
            args.isPaused,
            args.isOpen,
            args.counter,
            args.reserved,
        );
    }

    /**
     * Deserializes the {@link IndexProtocolState} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(
        accountInfo: web3.AccountInfo<Buffer>,
        offset = 0,
    ): [IndexProtocolState, number] {
        return IndexProtocolState.deserialize(accountInfo.data, offset);
    }

    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link IndexProtocolState} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(
        connection: web3.Connection,
        address: web3.PublicKey,
        commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
    ): Promise<IndexProtocolState> {
        const accountInfo = await connection.getAccountInfo(
            address,
            commitmentOrConfig,
        );
        if (accountInfo == null) {
            throw new Error(
                `Unable to find IndexProtocolState account at ${address}`,
            );
        }
        return IndexProtocolState.fromAccountInfo(accountInfo, 0)[0];
    }

    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(
        programId: web3.PublicKey = new web3.PublicKey(
            "indxL6jiTVfJL48JFdRu7Bz4WKXBQX1otGgvnvpsaPE",
        ),
    ) {
        return beetSolana.GpaBuilder.fromStruct(
            programId,
            indexProtocolStateBeet,
        );
    }

    /**
     * Deserializes the {@link IndexProtocolState} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset = 0): [IndexProtocolState, number] {
        return indexProtocolStateBeet.deserialize(buf, offset);
    }

    /**
     * Serializes the {@link IndexProtocolState} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number] {
        return indexProtocolStateBeet.serialize({
            accountDiscriminator: indexProtocolStateDiscriminator,
            ...this,
        });
    }

    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link IndexProtocolState}
     */
    static get byteSize() {
        return indexProtocolStateBeet.byteSize;
    }

    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link IndexProtocolState} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(
        connection: web3.Connection,
        commitment?: web3.Commitment,
    ): Promise<number> {
        return connection.getMinimumBalanceForRentExemption(
            IndexProtocolState.byteSize,
            commitment,
        );
    }

    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link IndexProtocolState} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset = 0) {
        return buf.byteLength - offset === IndexProtocolState.byteSize;
    }

    /**
     * Returns a readable version of {@link IndexProtocolState} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            superAuthority: this.superAuthority.toBase58(),
            isPaused: this.isPaused,
            isOpen: this.isOpen,
            counter: (() => {
                const x = <{ toNumber: () => number }>this.counter;
                if (typeof x.toNumber === "function") {
                    try {
                        return x.toNumber();
                    } catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            reserved: this.reserved,
        };
    }
}

/**
 * @category Accounts
 * @category generated
 */
export const indexProtocolStateBeet = new beet.BeetStruct<
    IndexProtocolState,
    IndexProtocolStateArgs & {
        accountDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["superAuthority", beetSolana.publicKey],
        ["isPaused", beet.bool],
        ["isOpen", beet.bool],
        ["counter", beet.u64],
        ["reserved", beet.uniformFixedSizeArray(beet.u8, 64)],
    ],
    IndexProtocolState.fromArgs,
    "IndexProtocolState",
);
