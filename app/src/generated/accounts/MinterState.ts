/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";

/**
 * Arguments used to create {@link MinterState}
 * @category Accounts
 * @category generated
 */
export type MinterStateArgs = {
    burntMints: web3.PublicKey[];
};

export const minterStateDiscriminator = [251, 69, 145, 137, 48, 218, 88, 148];
/**
 * Holds the data for the {@link MinterState} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class MinterState implements MinterStateArgs {
    private constructor(readonly burntMints: web3.PublicKey[]) {}

    /**
     * Creates a {@link MinterState} instance from the provided args.
     */
    static fromArgs(args: MinterStateArgs) {
        return new MinterState(args.burntMints);
    }

    /**
     * Deserializes the {@link MinterState} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(
        accountInfo: web3.AccountInfo<Buffer>,
        offset = 0,
    ): [MinterState, number] {
        return MinterState.deserialize(accountInfo.data, offset);
    }

    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link MinterState} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(
        connection: web3.Connection,
        address: web3.PublicKey,
        commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
    ): Promise<MinterState> {
        const accountInfo = await connection.getAccountInfo(
            address,
            commitmentOrConfig,
        );
        if (accountInfo == null) {
            throw new Error(`Unable to find MinterState account at ${address}`);
        }
        return MinterState.fromAccountInfo(accountInfo, 0)[0];
    }

    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(
        programId: web3.PublicKey = new web3.PublicKey(
            "indxL6jiTVfJL48JFdRu7Bz4WKXBQX1otGgvnvpsaPE",
        ),
    ) {
        return beetSolana.GpaBuilder.fromStruct(programId, minterStateBeet);
    }

    /**
     * Deserializes the {@link MinterState} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset = 0): [MinterState, number] {
        return minterStateBeet.deserialize(buf, offset);
    }

    /**
     * Serializes the {@link MinterState} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number] {
        return minterStateBeet.serialize({
            accountDiscriminator: minterStateDiscriminator,
            ...this,
        });
    }

    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link MinterState} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args: MinterStateArgs) {
        const instance = MinterState.fromArgs(args);
        return minterStateBeet.toFixedFromValue({
            accountDiscriminator: minterStateDiscriminator,
            ...instance,
        }).byteSize;
    }

    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link MinterState} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(
        args: MinterStateArgs,
        connection: web3.Connection,
        commitment?: web3.Commitment,
    ): Promise<number> {
        return connection.getMinimumBalanceForRentExemption(
            MinterState.byteSize(args),
            commitment,
        );
    }

    /**
     * Returns a readable version of {@link MinterState} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            burntMints: this.burntMints,
        };
    }
}

/**
 * @category Accounts
 * @category generated
 */
export const minterStateBeet = new beet.FixableBeetStruct<
    MinterState,
    MinterStateArgs & {
        accountDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["burntMints", beet.array(beetSolana.publicKey)],
    ],
    MinterState.fromArgs,
    "MinterState",
);
