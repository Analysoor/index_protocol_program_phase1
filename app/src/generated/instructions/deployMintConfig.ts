/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import * as beet from "@metaplex-foundation/beet";
import { Config, configBeet } from "../types/Config";
import { MintType, mintTypeBeet } from "../types/MintType";
import { MintPhase, mintPhaseBeet } from "../types/MintPhase";

/**
 * @category Instructions
 * @category DeployMintConfig
 * @category generated
 */
export type DeployMintConfigInstructionArgs = {
    config: Config;
    fundsRecipient: web3.PublicKey;
    splTokenName: string;
    mintType: MintType;
    mintPhase: MintPhase;
};
/**
 * @category Instructions
 * @category DeployMintConfig
 * @category generated
 */
export const deployMintConfigStruct = new beet.FixableBeetArgsStruct<
    DeployMintConfigInstructionArgs & {
        instructionDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["config", configBeet],
        ["fundsRecipient", beetSolana.publicKey],
        ["splTokenName", beet.utf8String],
        ["mintType", mintTypeBeet],
        ["mintPhase", mintPhaseBeet],
    ],
    "DeployMintConfigInstructionArgs",
);
/**
 * Accounts required by the _deployMintConfig_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] indexProtocolState
 * @property [_writable_] mintDataConfig
 * @category Instructions
 * @category DeployMintConfig
 * @category generated
 */
export type DeployMintConfigInstructionAccounts = {
    authority: web3.PublicKey;
    indexProtocolState: web3.PublicKey;
    mintDataConfig: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};

export const deployMintConfigInstructionDiscriminator = [
    1, 73, 108, 6, 53, 27, 75, 229,
];

/**
 * Creates a _DeployMintConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DeployMintConfig
 * @category generated
 */
export function createDeployMintConfigInstruction(
    accounts: DeployMintConfigInstructionAccounts,
    args: DeployMintConfigInstructionArgs,
    programId = new web3.PublicKey(
        "indxL6jiTVfJL48JFdRu7Bz4WKXBQX1otGgvnvpsaPE",
    ),
) {
    const [data] = deployMintConfigStruct.serialize({
        instructionDiscriminator: deployMintConfigInstructionDiscriminator,
        ...args,
    });
    const keys: web3.AccountMeta[] = [
        {
            pubkey: accounts.authority,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.indexProtocolState,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.mintDataConfig,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }

    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
