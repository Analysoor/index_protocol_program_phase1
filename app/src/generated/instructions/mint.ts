/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionArgs = {
    tick: string;
};
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export const mintStruct = new beet.FixableBeetArgsStruct<
    MintInstructionArgs & {
        instructionDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
        ["tick", beet.utf8String],
    ],
    "MintInstructionArgs",
);
/**
 * Accounts required by the _mint_ instruction
 *
 * @property [_writable_, **signer**] feePayer
 * @property [] indexProtocolState
 * @property [_writable_] mintDataConfig
 * @property [_writable_] minterState
 * @property [_writable_] burnableMint
 * @property [_writable_] burnableMintAta
 * @property [] splTokenProgram
 * @property [_writable_] fundsRecipient
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionAccounts = {
    feePayer: web3.PublicKey;
    indexProtocolState: web3.PublicKey;
    mintDataConfig: web3.PublicKey;
    minterState: web3.PublicKey;
    burnableMint: web3.PublicKey;
    burnableMintAta: web3.PublicKey;
    splTokenProgram: web3.PublicKey;
    fundsRecipient: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    anchorRemainingAccounts?: web3.AccountMeta[];
};

export const mintInstructionDiscriminator = [
    51, 57, 225, 47, 182, 146, 137, 166,
];

/**
 * Creates a _Mint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Mint
 * @category generated
 */
export function createMintInstruction(
    accounts: MintInstructionAccounts,
    args: MintInstructionArgs,
    programId = new web3.PublicKey(
        "indxL6jiTVfJL48JFdRu7Bz4WKXBQX1otGgvnvpsaPE",
    ),
) {
    const [data] = mintStruct.serialize({
        instructionDiscriminator: mintInstructionDiscriminator,
        ...args,
    });
    const keys: web3.AccountMeta[] = [
        {
            pubkey: accounts.feePayer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: accounts.indexProtocolState,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.mintDataConfig,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.minterState,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.burnableMint,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.burnableMintAta,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.splTokenProgram,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.fundsRecipient,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
    ];

    if (accounts.anchorRemainingAccounts != null) {
        for (const acc of accounts.anchorRemainingAccounts) {
            keys.push(acc);
        }
    }

    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
