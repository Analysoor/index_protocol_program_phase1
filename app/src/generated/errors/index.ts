/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number };
type MaybeErrorWithCode = ErrorWithCode | null | undefined;

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map();
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map();

/**
 * PublicKeyMismatch: 'PublicKeyMismatch'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyMismatchError extends Error {
    readonly code: number = 0x1770;
    readonly name: string = "PublicKeyMismatch";
    constructor() {
        super("PublicKeyMismatch");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, PublicKeyMismatchError);
        }
    }
}

createErrorFromCodeLookup.set(0x1770, () => new PublicKeyMismatchError());
createErrorFromNameLookup.set(
    "PublicKeyMismatch",
    () => new PublicKeyMismatchError(),
);

/**
 * Uninitialized: 'Account is not initialized!'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedError extends Error {
    readonly code: number = 0x1771;
    readonly name: string = "Uninitialized";
    constructor() {
        super("Account is not initialized!");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, UninitializedError);
        }
    }
}

createErrorFromCodeLookup.set(0x1771, () => new UninitializedError());
createErrorFromNameLookup.set("Uninitialized", () => new UninitializedError());

/**
 * InvalidSeed: 'Invalid hash name seed length'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSeedError extends Error {
    readonly code: number = 0x1772;
    readonly name: string = "InvalidSeed";
    constructor() {
        super("Invalid hash name seed length");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, InvalidSeedError);
        }
    }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidSeedError());
createErrorFromNameLookup.set("InvalidSeed", () => new InvalidSeedError());

/**
 * TokenNameTooLong: 'Token Name too long'
 *
 * @category Errors
 * @category generated
 */
export class TokenNameTooLongError extends Error {
    readonly code: number = 0x1773;
    readonly name: string = "TokenNameTooLong";
    constructor() {
        super("Token Name too long");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, TokenNameTooLongError);
        }
    }
}

createErrorFromCodeLookup.set(0x1773, () => new TokenNameTooLongError());
createErrorFromNameLookup.set(
    "TokenNameTooLong",
    () => new TokenNameTooLongError(),
);

/**
 * IndexProtocolIsPaused: 'Protocol is paused'
 *
 * @category Errors
 * @category generated
 */
export class IndexProtocolIsPausedError extends Error {
    readonly code: number = 0x1774;
    readonly name: string = "IndexProtocolIsPaused";
    constructor() {
        super("Protocol is paused");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, IndexProtocolIsPausedError);
        }
    }
}

createErrorFromCodeLookup.set(0x1774, () => new IndexProtocolIsPausedError());
createErrorFromNameLookup.set(
    "IndexProtocolIsPaused",
    () => new IndexProtocolIsPausedError(),
);

/**
 * StartDateInvalid: 'Start Date cannot be in the past.'
 *
 * @category Errors
 * @category generated
 */
export class StartDateInvalidError extends Error {
    readonly code: number = 0x1775;
    readonly name: string = "StartDateInvalid";
    constructor() {
        super("Start Date cannot be in the past.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, StartDateInvalidError);
        }
    }
}

createErrorFromCodeLookup.set(0x1775, () => new StartDateInvalidError());
createErrorFromNameLookup.set(
    "StartDateInvalid",
    () => new StartDateInvalidError(),
);

/**
 * SupplyTooLow: 'Max supply cannot be 0.'
 *
 * @category Errors
 * @category generated
 */
export class SupplyTooLowError extends Error {
    readonly code: number = 0x1776;
    readonly name: string = "SupplyTooLow";
    constructor() {
        super("Max supply cannot be 0.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, SupplyTooLowError);
        }
    }
}

createErrorFromCodeLookup.set(0x1776, () => new SupplyTooLowError());
createErrorFromNameLookup.set("SupplyTooLow", () => new SupplyTooLowError());

/**
 * TickNotLowercased: 'Tick is not lowercased.'
 *
 * @category Errors
 * @category generated
 */
export class TickNotLowercasedError extends Error {
    readonly code: number = 0x1777;
    readonly name: string = "TickNotLowercased";
    constructor() {
        super("Tick is not lowercased.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, TickNotLowercasedError);
        }
    }
}

createErrorFromCodeLookup.set(0x1777, () => new TickNotLowercasedError());
createErrorFromNameLookup.set(
    "TickNotLowercased",
    () => new TickNotLowercasedError(),
);

/**
 * TickInvalid: 'Tick is not 4 character in length'
 *
 * @category Errors
 * @category generated
 */
export class TickInvalidError extends Error {
    readonly code: number = 0x1778;
    readonly name: string = "TickInvalid";
    constructor() {
        super("Tick is not 4 character in length");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, TickInvalidError);
        }
    }
}

createErrorFromCodeLookup.set(0x1778, () => new TickInvalidError());
createErrorFromNameLookup.set("TickInvalid", () => new TickInvalidError());

/**
 * MintHasNotStarted: 'Start date did not reach yet.'
 *
 * @category Errors
 * @category generated
 */
export class MintHasNotStartedError extends Error {
    readonly code: number = 0x1779;
    readonly name: string = "MintHasNotStarted";
    constructor() {
        super("Start date did not reach yet.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, MintHasNotStartedError);
        }
    }
}

createErrorFromCodeLookup.set(0x1779, () => new MintHasNotStartedError());
createErrorFromNameLookup.set(
    "MintHasNotStarted",
    () => new MintHasNotStartedError(),
);

/**
 * MaxSupplyHasReached: 'Cannot mint more max supply has reached.'
 *
 * @category Errors
 * @category generated
 */
export class MaxSupplyHasReachedError extends Error {
    readonly code: number = 0x177a;
    readonly name: string = "MaxSupplyHasReached";
    constructor() {
        super("Cannot mint more max supply has reached.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, MaxSupplyHasReachedError);
        }
    }
}

createErrorFromCodeLookup.set(0x177a, () => new MaxSupplyHasReachedError());
createErrorFromNameLookup.set(
    "MaxSupplyHasReached",
    () => new MaxSupplyHasReachedError(),
);

/**
 * WrongAccountOwner: 'Wrong account owner.'
 *
 * @category Errors
 * @category generated
 */
export class WrongAccountOwnerError extends Error {
    readonly code: number = 0x177b;
    readonly name: string = "WrongAccountOwner";
    constructor() {
        super("Wrong account owner.");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, WrongAccountOwnerError);
        }
    }
}

createErrorFromCodeLookup.set(0x177b, () => new WrongAccountOwnerError());
createErrorFromNameLookup.set(
    "WrongAccountOwner",
    () => new WrongAccountOwnerError(),
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
